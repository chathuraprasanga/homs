{"ast":null,"code":"import { Subject, throwError } from \"rxjs\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let ProductService = /*#__PURE__*/(() => {\n  class ProductService {\n    constructor(httpClient) {\n      this.httpClient = httpClient;\n      this.onProductsChange = new Subject();\n    }\n    resolve() {\n      this.getProducts({});\n      // console.log(\"This is resolve\")\n    }\n\n    getProducts(productSearchRQ) {\n      //Jpa Method\n      // this.httpClient.get('http://localhost:8082/api/v1/product/get-all-product')\n      //   .subscribe((products) => {\n      //     if (products){\n      //       this.onProductsChange.next(products)\n      //       // console.log(\"hardwares\",hardwares)\n      //     }\n      //\n      //   });\n      //jdbc method\n      this.httpClient.post('http://localhost:8082/api/v1/product/get-all-product-jdbc', productSearchRQ).subscribe(products => {\n        if (products) {\n          this.onProductsChange.next(products);\n          // console.log(\"products\",products)\n        }\n      });\n    }\n\n    deleteProduct(productID) {\n      console.log(productID);\n      this.httpClient.delete(\"http://localhost:8082/api/v1/product/delete-product\" + \"/\" + productID).subscribe(result => {\n        // console.log(\"result\", result);\n        alert(\"Product Deleted\");\n        location.reload();\n      });\n    }\n    //  Error Handling\n    handleError(error) {\n      if (error.status === 0) {\n        // A client-side or network error occurred. Handle it accordingly.\n        console.error('An error occurred:', error.error);\n      } else {\n        // The backend returned an unsuccessful response code.\n        // The response body may contain clues as to what went wrong.\n        console.error(`Backend returned code ${error.status}, body was: `, error.error);\n      }\n      // Return an observable with a user-facing error message.\n      return throwError(() => new Error('Something bad happened; please try again later.'));\n    }\n  }\n  ProductService.ɵfac = function ProductService_Factory(t) {\n    return new (t || ProductService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  ProductService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ProductService,\n    factory: ProductService.ɵfac,\n    providedIn: 'root'\n  });\n  return ProductService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}