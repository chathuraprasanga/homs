{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { Validators } from \"@angular/forms\";\nimport { UserDTO } from \"../dto/user\";\nimport { Subscription } from \"rxjs\";\nimport * as _ from 'underscore';\nlet UserAddEditComponent = class UserAddEditComponent {\n  constructor(formBuilder, userAddEditService, location) {\n    this.formBuilder = formBuilder;\n    this.userAddEditService = userAddEditService;\n    this.location = location;\n    this.user = new UserDTO();\n    this.onUserChangeSub = new Subscription();\n  }\n  ngOnInit() {\n    this.onUserChangeSub = this.userAddEditService.user.subscribe(user => {\n      if (!_.isEmpty(user)) {\n        // console.log(product);\n        this.user = new UserDTO(user);\n        this.pageType = 'edit';\n      } else {\n        this.user = new UserDTO();\n        this.pageType = 'new';\n      }\n      // console.log(\"hardware\" , this.hardware)\n      this.userForm = this.createForm();\n    });\n  }\n  ngOnDestroy() {\n    this.onUserChangeSub.unsubscribe();\n  }\n  createForm() {\n    return this.formBuilder.group({\n      userID: [this.user.userID],\n      userName: [this.user.userName, [Validators.required]],\n      userPassword: [this.user.userPassword, [Validators.required]],\n      userStatus: [this.user.userStatus, [Validators.required]]\n    });\n  }\n  isValid() {\n    return this.userForm.valid;\n  }\n  isDirty() {\n    return this.userForm.dirty;\n  }\n  goBack() {\n    // console.log(\"click\")\n    // this.router.navigate(['admin/orders']) //using router link\n    this.location.back();\n  }\n  saveProduct() {\n    let user = this.userForm.getRawValue();\n    console.log(\"get data\", user);\n    this.userAddEditService.saveUser(user);\n    if (user) {\n      // console.log(product);\n      alert(\"Data Saved\");\n      this.location.back();\n    }\n  }\n};\nUserAddEditComponent = __decorate([Component({\n  selector: 'app-user-add-edit',\n  templateUrl: './user-add-edit.component.html',\n  styleUrls: ['./user-add-edit.component.css']\n})], UserAddEditComponent);\nexport { UserAddEditComponent };","map":{"version":3,"mappings":";AAAA,SAAQA,SAAS,QAAe,eAAe;AAC/C,SAAgCC,UAAU,QAAO,gBAAgB;AACjE,SAAQC,OAAO,QAAO,aAAa;AAGnC,SAAQC,YAAY,QAAO,MAAM;AACjC,OAAO,KAAKC,CAAC,MAAM,YAAY;AAOxB,IAAMC,oBAAoB,GAA1B,MAAMA,oBAAoB;EAQ/BC,YACUC,WAAyB,EACzBC,kBAAuC,EACvCC,QAAkB;IAFlB,gBAAW,GAAXF,WAAW;IACX,uBAAkB,GAAlBC,kBAAkB;IAClB,aAAQ,GAARC,QAAQ;IARlB,SAAI,GAAG,IAAIP,OAAO,EAAE;IAGpB,oBAAe,GAAG,IAAIC,YAAY,EAAE;EAMlC;EAEFO,QAAQ;IACN,IAAI,CAACC,eAAe,GAAG,IAAI,CAACH,kBAAkB,CAACI,IAAI,CAChDC,SAAS,CAAED,IAAI,IAAI;MAClB,IAAI,CAACR,CAAC,CAACU,OAAO,CAACF,IAAI,CAAC,EAAC;QACnB;QACA,IAAI,CAACA,IAAI,GAAG,IAAIV,OAAO,CAACU,IAAI,CAAC;QAC7B,IAAI,CAACG,QAAQ,GAAE,MAAM;OACtB,MAAK;QACJ,IAAI,CAACH,IAAI,GAAG,IAAIV,OAAO,EAAE;QACzB,IAAI,CAACa,QAAQ,GAAG,KAAK;;MAEvB;MACA,IAAI,CAACC,QAAQ,GAAG,IAAI,CAACC,UAAU,EAAE;IACnC,CAAC,CAAC;EACN;EAEAC,WAAW;IACT,IAAI,CAACP,eAAe,CAACQ,WAAW,EAAE;EACpC;EAEAF,UAAU;IACR,OAAO,IAAI,CAACV,WAAW,CAACa,KAAK,CAAC;MAC5BC,MAAM,EAAE,CAAC,IAAI,CAACT,IAAI,CAACS,MAAM,CAAC;MAC1BC,QAAQ,EAAE,CAAC,IAAI,CAACV,IAAI,CAACU,QAAQ,EAAC,CAACrB,UAAU,CAACsB,QAAQ,CAAC,CAAC;MACpDC,YAAY,EAAG,CAAC,IAAI,CAACZ,IAAI,CAACY,YAAY,EAAC,CAACvB,UAAU,CAACsB,QAAQ,CAAC,CAAC;MAC7DE,UAAU,EAAG,CAAC,IAAI,CAACb,IAAI,CAACa,UAAU,EAAC,CAACxB,UAAU,CAACsB,QAAQ,CAAC;KAEzD,CAAC;EACJ;EAEAG,OAAO;IACL,OAAO,IAAI,CAACV,QAAQ,CAACW,KAAK;EAC5B;EAEAC,OAAO;IACL,OAAO,IAAI,CAACZ,QAAQ,CAACa,KAAK;EAC5B;EAEAC,MAAM;IACJ;IACA;IACA,IAAI,CAACrB,QAAQ,CAACsB,IAAI,EAAE;EACtB;EAEAC,WAAW;IACT,IAAIpB,IAAI,GAAG,IAAI,CAACI,QAAQ,CAACiB,WAAW,EAAE;IACtCC,OAAO,CAACC,GAAG,CAAC,UAAU,EAAEvB,IAAI,CAAC;IAC7B,IAAI,CAACJ,kBAAkB,CAAC4B,QAAQ,CAACxB,IAAI,CAAC;IACtC,IAAIA,IAAI,EAAC;MACP;MACAyB,KAAK,CAAC,YAAY,CAAC;MACnB,IAAI,CAAC5B,QAAQ,CAACsB,IAAI,EAAE;;EAExB;CAED;AArEY1B,oBAAoB,eALhCL,SAAS,CAAC;EACTsC,QAAQ,EAAE,mBAAmB;EAC7BC,WAAW,EAAE,gCAAgC;EAC7CC,SAAS,EAAE,CAAC,+BAA+B;CAC5C,CAAC,GACWnC,oBAAoB,CAqEhC;SArEYA,oBAAoB","names":["Component","Validators","UserDTO","Subscription","_","UserAddEditComponent","constructor","formBuilder","userAddEditService","location","ngOnInit","onUserChangeSub","user","subscribe","isEmpty","pageType","userForm","createForm","ngOnDestroy","unsubscribe","group","userID","userName","required","userPassword","userStatus","isValid","valid","isDirty","dirty","goBack","back","saveProduct","getRawValue","console","log","saveUser","alert","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["C:\\Users\\Chathura Prasanga\\Desktop\\HOM system\\Front-End\\homs\\src\\app\\components\\user\\user-add-edit\\user-add-edit.component.ts"],"sourcesContent":["import {Component, OnInit} from '@angular/core';\nimport {FormBuilder, FormGroup, Validators} from \"@angular/forms\";\nimport {UserDTO} from \"../dto/user\";\nimport {UserAddEditService} from \"../../../services/user/user-add-edit.service\";\nimport {Location} from \"@angular/common\";\nimport {Subscription} from \"rxjs\";\nimport * as _ from 'underscore';\n\n@Component({\n  selector: 'app-user-add-edit',\n  templateUrl: './user-add-edit.component.html',\n  styleUrls: ['./user-add-edit.component.css']\n})\nexport class UserAddEditComponent implements OnInit{\n\n  userForm : FormGroup;\n  user = new UserDTO();\n  pageType: string;\n\n  onUserChangeSub = new Subscription();\n\n  constructor(\n    private formBuilder : FormBuilder,\n    private userAddEditService : UserAddEditService,\n    private location :Location\n  ){}\n\n  ngOnInit(): void {\n    this.onUserChangeSub = this.userAddEditService.user\n      .subscribe((user) => {\n        if (!_.isEmpty(user)){\n          // console.log(product);\n          this.user = new UserDTO(user);\n          this.pageType ='edit';\n        }else {\n          this.user = new UserDTO();\n          this.pageType = 'new';\n        }\n        // console.log(\"hardware\" , this.hardware)\n        this.userForm = this.createForm();\n      })\n  }\n\n  ngOnDestroy(): void {\n    this.onUserChangeSub.unsubscribe();\n  }\n\n  createForm(){\n    return this.formBuilder.group({\n      userID: [this.user.userID],\n      userName: [this.user.userName,[Validators.required]],\n      userPassword : [this.user.userPassword,[Validators.required]],\n      userStatus : [this.user.userStatus,[Validators.required]],\n\n    })\n  }\n\n  isValid(){\n    return this.userForm.valid;\n  }\n\n  isDirty(){\n    return this.userForm.dirty;\n  }\n\n  goBack(){\n    // console.log(\"click\")\n    // this.router.navigate(['admin/orders']) //using router link\n    this.location.back();\n  }\n\n  saveProduct(){\n    let user = this.userForm.getRawValue();\n    console.log(\"get data\", user);\n    this.userAddEditService.saveUser(user);\n    if (user){\n      // console.log(product);\n      alert(\"Data Saved\");\n      this.location.back()\n    }\n  }\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}