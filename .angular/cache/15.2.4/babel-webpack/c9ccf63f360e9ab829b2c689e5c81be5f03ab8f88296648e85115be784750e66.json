{"ast":null,"code":"import { Subject } from \"rxjs\";\nimport { throwError } from \"rxjs\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class ProductService {\n  constructor(httpClient) {\n    this.httpClient = httpClient;\n    this.onProductsChange = new Subject();\n  }\n  resolve() {\n    this.getProducts({});\n    // console.log(\"This is resolve\")\n  }\n\n  getProducts(productSearchRQ) {\n    //Jpa Method\n    // this.httpClient.get('http://localhost:8082/api/v1/product/get-all-product')\n    //   .subscribe((products) => {\n    //     if (products){\n    //       this.onProductsChange.next(products)\n    //       // console.log(\"hardwares\",hardwares)\n    //     }\n    //\n    //   });\n    //jdbc method\n    this.httpClient.post('http://localhost:8082/api/v1/product/get-all-product-jdbc', productSearchRQ).subscribe(products => {\n      if (products) {\n        this.onProductsChange.next(products);\n        console.log(\"products\", products);\n      }\n    });\n  }\n  deleteProduct(productID) {\n    console.log(productID);\n    this.httpClient.delete(\"http://localhost:8082/api/v1/product/delete-product\" + \"/\" + productID).subscribe(result => {\n      console.log(\"result\", result);\n      location.reload();\n    });\n  }\n  //  Error Handling\n  handleError(error) {\n    if (error.status === 0) {\n      // A client-side or network error occurred. Handle it accordingly.\n      console.error('An error occurred:', error.error);\n    } else {\n      // The backend returned an unsuccessful response code.\n      // The response body may contain clues as to what went wrong.\n      console.error(`Backend returned code ${error.status}, body was: `, error.error);\n    }\n    // Return an observable with a user-facing error message.\n    return throwError(() => new Error('Something bad happened; please try again later.'));\n  }\n}\nProductService.ɵfac = function ProductService_Factory(t) {\n  return new (t || ProductService)(i0.ɵɵinject(i1.HttpClient));\n};\nProductService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ProductService,\n  factory: ProductService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAGA,SAAQA,OAAO,QAAO,MAAM;AAE5B,SAAQC,UAAU,QAAO,MAAM;;;AAK/B,OAAM,MAAOC,cAAc;EAIzBC,YAAoBC,UAAsB;IAAtB,eAAU,GAAVA,UAAU;IAF9B,qBAAgB,GAAG,IAAIJ,OAAO,EAAE;EAEc;EAE9CK,OAAO;IACL,IAAI,CAACC,WAAW,CAAC,EAAE,CAAC;IACpB;EACF;;EAEAA,WAAW,CAACC,eAAe;IACzB;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IAEA;IACA,IAAI,CAACH,UAAU,CAACI,IAAI,CAAC,2DAA2D,EAAED,eAAe,CAAC,CAC/FE,SAAS,CAAEC,QAAQ,IAAI;MACtB,IAAIA,QAAQ,EAAC;QACX,IAAI,CAACC,gBAAgB,CAACC,IAAI,CAACF,QAAQ,CAAC;QACpCG,OAAO,CAACC,GAAG,CAAC,UAAU,EAACJ,QAAQ,CAAC;;IAGpC,CAAC,CAAC;EACN;EAEAK,aAAa,CAACC,SAAS;IACrBH,OAAO,CAACC,GAAG,CAACE,SAAS,CAAC;IACtB,IAAI,CAACZ,UAAU,CAACa,MAAM,CAAC,qDAAqD,GAAC,GAAG,GAACD,SAAS,CAAC,CAExFP,SAAS,CAAES,MAAM,IAAI;MACpBL,OAAO,CAACC,GAAG,CAAC,QAAQ,EAAEI,MAAM,CAAC;MAC3BC,QAAQ,CAACC,MAAM,EAAE;IAErB,CAAC,CAAC;EAEN;EAEF;EACUC,WAAW,CAACC,KAAwB;IAC1C,IAAIA,KAAK,CAACC,MAAM,KAAK,CAAC,EAAE;MACtB;MACAV,OAAO,CAACS,KAAK,CAAC,oBAAoB,EAAEA,KAAK,CAACA,KAAK,CAAC;KACjD,MAAM;MACL;MACA;MACAT,OAAO,CAACS,KAAK,CACX,yBAAyBA,KAAK,CAACC,MAAM,cAAc,EAAED,KAAK,CAACA,KAAK,CAAC;;IAErE;IACA,OAAOrB,UAAU,CAAC,MAAM,IAAIuB,KAAK,CAAC,iDAAiD,CAAC,CAAC;EACvF;;AA1DWtB,cAAc;mBAAdA,cAAc;AAAA;AAAdA,cAAc;SAAdA,cAAc;EAAAuB,SAAdvB,cAAc;EAAAwB,YAFb;AAAM","names":["Subject","throwError","ProductService","constructor","httpClient","resolve","getProducts","productSearchRQ","post","subscribe","products","onProductsChange","next","console","log","deleteProduct","productID","delete","result","location","reload","handleError","error","status","Error","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\Chathura Prasanga\\Desktop\\HOM system\\Front-End\\homs\\src\\app\\services\\product\\product.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport {Resolve} from \"@angular/router\";\nimport {HttpClient, HttpErrorResponse} from \"@angular/common/http\";\nimport {Subject} from \"rxjs\";\nimport {Observable} from \"rxjs\";\nimport {throwError} from \"rxjs\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ProductService implements Resolve<any>{\n\n  onProductsChange = new Subject();\n\n  constructor(private httpClient: HttpClient) { }\n\n  resolve():Observable<any> | Promise<any> | any {\n    this.getProducts({});\n    // console.log(\"This is resolve\")\n  }\n\n  getProducts(productSearchRQ){\n    //Jpa Method\n    // this.httpClient.get('http://localhost:8082/api/v1/product/get-all-product')\n    //   .subscribe((products) => {\n    //     if (products){\n    //       this.onProductsChange.next(products)\n    //       // console.log(\"hardwares\",hardwares)\n    //     }\n    //\n    //   });\n\n    //jdbc method\n    this.httpClient.post('http://localhost:8082/api/v1/product/get-all-product-jdbc', productSearchRQ)\n      .subscribe((products) => {\n        if (products){\n          this.onProductsChange.next(products);\n          console.log(\"products\",products)\n        }\n\n      });\n  }\n\n  deleteProduct(productID){\n    console.log(productID);\n    this.httpClient.delete(\"http://localhost:8082/api/v1/product/delete-product\"+\"/\"+productID)\n      \n      .subscribe((result) => {\n        console.log(\"result\", result);\n          location.reload();\n\n      })\n\n  }\n\n//  Error Handling\n  private handleError(error: HttpErrorResponse) {\n    if (error.status === 0) {\n      // A client-side or network error occurred. Handle it accordingly.\n      console.error('An error occurred:', error.error);\n    } else {\n      // The backend returned an unsuccessful response code.\n      // The response body may contain clues as to what went wrong.\n      console.error(\n        `Backend returned code ${error.status}, body was: `, error.error);\n    }\n    // Return an observable with a user-facing error message.\n    return throwError(() => new Error('Something bad happened; please try again later.'));\n  }\n\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}