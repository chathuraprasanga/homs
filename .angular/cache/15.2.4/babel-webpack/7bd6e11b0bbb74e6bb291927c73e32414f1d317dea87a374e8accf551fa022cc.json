{"ast":null,"code":"import { Subject, throwError } from \"rxjs\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class UserService {\n  constructor(httpClient) {\n    this.httpClient = httpClient;\n    this.onUsersChange = new Subject();\n  }\n  resolve() {\n    this.getUsers({});\n    // console.log(\"This is resolve\")\n  }\n\n  getUsers(userSearchRQ) {\n    //Jpa Method\n    // this.httpClient.get('http://localhost:8082/api/v1/product/get-all-product')\n    //   .subscribe((products) => {\n    //     if (products){\n    //       this.onProductsChange.next(products)\n    //       // console.log(\"hardwares\",hardwares)\n    //     }\n    //\n    //   });\n    //jdbc method\n    this.httpClient.post('http://localhost:8082/api/v1/user/get-all-user-jdbc', userSearchRQ).subscribe(users => {\n      if (users) {\n        this.onUsersChange.next(users);\n        // console.log(\"products\",products)\n      }\n    });\n  }\n\n  deleteUser(userID) {\n    console.log(userID);\n    this.httpClient.delete(\"http://localhost:8082/api/v1/product/delete-product\" + \"/\" + userID).subscribe(result => {\n      // console.log(\"result\", result);\n      alert(\"Product Deleted\");\n      location.reload();\n    });\n  }\n  //  Error Handling\n  handleError(error) {\n    if (error.status === 0) {\n      // A client-side or network error occurred. Handle it accordingly.\n      console.error('An error occurred:', error.error);\n    } else {\n      // The backend returned an unsuccessful response code.\n      // The response body may contain clues as to what went wrong.\n      console.error(`Backend returned code ${error.status}, body was: `, error.error);\n    }\n    // Return an observable with a user-facing error message.\n    return throwError(() => new Error('Something bad happened; please try again later.'));\n  }\n}\nUserService.ɵfac = function UserService_Factory(t) {\n  return new (t || UserService)(i0.ɵɵinject(i1.HttpClient));\n};\nUserService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: UserService,\n  factory: UserService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAGA,SAAQA,OAAO,EAAEC,UAAU,QAAO,MAAM;;;AAMxC,OAAM,MAAOC,WAAW;EAKtBC,YAAoBC,UAAsB;IAAtB,eAAU,GAAVA,UAAU;IAH9B,kBAAa,GAAG,IAAIJ,OAAO,EAAE;EAGiB;EAE9CK,OAAO;IACL,IAAI,CAACC,QAAQ,CAAC,EAAE,CAAC;IACjB;EACF;;EAEAA,QAAQ,CAACC,YAAY;IACnB;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IAEA;IACA,IAAI,CAACH,UAAU,CAACI,IAAI,CAAC,qDAAqD,EAAED,YAAY,CAAC,CACtFE,SAAS,CAAEC,KAAK,IAAI;MACnB,IAAIA,KAAK,EAAC;QACR,IAAI,CAACC,aAAa,CAACC,IAAI,CAACF,KAAK,CAAC;QAC9B;;IAGJ,CAAC,CAAC;EACN;;EAEAG,UAAU,CAACC,MAAM;IACfC,OAAO,CAACC,GAAG,CAACF,MAAM,CAAC;IACnB,IAAI,CAACV,UAAU,CAACa,MAAM,CAAC,qDAAqD,GAAC,GAAG,GAACH,MAAM,CAAC,CACrFL,SAAS,CAAES,MAAM,IAAI;MACpB;MACAC,KAAK,CAAC,iBAAiB,CAAC;MACxBC,QAAQ,CAACC,MAAM,EAAE;IACnB,CAAC,CAAC;EAEN;EAGF;EACUC,WAAW,CAACC,KAAwB;IAC1C,IAAIA,KAAK,CAACC,MAAM,KAAK,CAAC,EAAE;MACtB;MACAT,OAAO,CAACQ,KAAK,CAAC,oBAAoB,EAAEA,KAAK,CAACA,KAAK,CAAC;KACjD,MAAM;MACL;MACA;MACAR,OAAO,CAACQ,KAAK,CACX,yBAAyBA,KAAK,CAACC,MAAM,cAAc,EAAED,KAAK,CAACA,KAAK,CAAC;;IAErE;IACA,OAAOtB,UAAU,CAAC,MAAM,IAAIwB,KAAK,CAAC,iDAAiD,CAAC,CAAC;EAEvF;;AA5DWvB,WAAW;mBAAXA,WAAW;AAAA;AAAXA,WAAW;SAAXA,WAAW;EAAAwB,SAAXxB,WAAW;EAAAyB,YAFV;AAAM","names":["Subject","throwError","UserService","constructor","httpClient","resolve","getUsers","userSearchRQ","post","subscribe","users","onUsersChange","next","deleteUser","userID","console","log","delete","result","alert","location","reload","handleError","error","status","Error","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\Chathura Prasanga\\Desktop\\HOM system\\Front-End\\homs\\src\\app\\services\\user\\user.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport {Resolve} from \"@angular/router\";\nimport {HttpClient, HttpErrorResponse} from \"@angular/common/http\";\nimport {Subject, throwError} from \"rxjs\";\nimport {Observable} from \"rxjs\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UserService implements Resolve<any>{\n\n  onUsersChange = new Subject();\n\n\n  constructor(private httpClient: HttpClient) { }\n\n  resolve():Observable<any> | Promise<any> | any {\n    this.getUsers({});\n    // console.log(\"This is resolve\")\n  }\n\n  getUsers(userSearchRQ){\n    //Jpa Method\n    // this.httpClient.get('http://localhost:8082/api/v1/product/get-all-product')\n    //   .subscribe((products) => {\n    //     if (products){\n    //       this.onProductsChange.next(products)\n    //       // console.log(\"hardwares\",hardwares)\n    //     }\n    //\n    //   });\n\n    //jdbc method\n    this.httpClient.post('http://localhost:8082/api/v1/user/get-all-user-jdbc', userSearchRQ)\n      .subscribe((users) => {\n        if (users){\n          this.onUsersChange.next(users);\n          // console.log(\"products\",products)\n        }\n\n      });\n  }\n\n  deleteUser(userID){\n    console.log(userID);\n    this.httpClient.delete(\"http://localhost:8082/api/v1/product/delete-product\"+\"/\"+userID)\n      .subscribe((result) => {\n        // console.log(\"result\", result);\n        alert(\"Product Deleted\");\n        location.reload();\n      });\n\n  }\n\n\n//  Error Handling\n  private handleError(error: HttpErrorResponse) {\n    if (error.status === 0) {\n      // A client-side or network error occurred. Handle it accordingly.\n      console.error('An error occurred:', error.error);\n    } else {\n      // The backend returned an unsuccessful response code.\n      // The response body may contain clues as to what went wrong.\n      console.error(\n        `Backend returned code ${error.status}, body was: `, error.error);\n    }\n    // Return an observable with a user-facing error message.\n    return throwError(() => new Error('Something bad happened; please try again later.'));\n\n  }\n\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}