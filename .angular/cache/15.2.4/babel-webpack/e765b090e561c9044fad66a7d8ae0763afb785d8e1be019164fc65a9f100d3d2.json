{"ast":null,"code":"import { Subject, throwError } from \"rxjs\";\nimport { pipe } from \"rxjs\";\nimport { error } from \"@angular/compiler-cli/src/transformers/util\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class ProductService {\n  constructor(httpClient) {\n    this.httpClient = httpClient;\n    this.onProductsChange = new Subject();\n  }\n  resolve() {\n    this.getProducts({});\n    // console.log(\"This is resolve\")\n  }\n\n  getProducts(productSearchRQ) {\n    //Jpa Method\n    // this.httpClient.get('http://localhost:8082/api/v1/product/get-all-product')\n    //   .subscribe((products) => {\n    //     if (products){\n    //       this.onProductsChange.next(products)\n    //       // console.log(\"hardwares\",hardwares)\n    //     }\n    //\n    //   });\n    //jdbc method\n    this.httpClient.post('http://localhost:8082/api/v1/product/get-all-product-jdbc', productSearchRQ).subscribe(products => {\n      if (products) {\n        this.onProductsChange.next(products);\n        // console.log(\"products\",products)\n      }\n    });\n  }\n\n  deleteProduct(productID) {\n    console.log(productID);\n    this.httpClient.delete(\"http://localhost:8082/api/v1/product/delete-product\" + \"/\" + productID).subscribe(result => {\n      console.log(\"result\", result);\n      location.reload();\n    }, pipe(error));\n  }\n  //  Error Handling\n  handleError(error) {\n    if (error.status === 0) {\n      // A client-side or network error occurred. Handle it accordingly.\n      console.error('An error occurred:', error.error);\n    } else {\n      // The backend returned an unsuccessful response code.\n      // The response body may contain clues as to what went wrong.\n      console.error(`Backend returned code ${error.status}, body was: `, error.error);\n    }\n    // Return an observable with a user-facing error message.\n    return throwError(() => new Error('Something bad happened; please try again later.'));\n  }\n}\nProductService.ɵfac = function ProductService_Factory(t) {\n  return new (t || ProductService)(i0.ɵɵinject(i1.HttpClient));\n};\nProductService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ProductService,\n  factory: ProductService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAGA,SAAoBA,OAAO,EAAEC,UAAU,QAAO,MAAM;AACpD,SAAQC,IAAI,QAAO,MAAM;AACzB,SAAQC,KAAK,QAAO,6CAA6C;;;AAKjE,OAAM,MAAOC,cAAc;EAKzBC,YAAoBC,UAAsB;IAAtB,eAAU,GAAVA,UAAU;IAH9B,qBAAgB,GAAG,IAAIN,OAAO,EAAE;EAGc;EAE9CO,OAAO;IACL,IAAI,CAACC,WAAW,CAAC,EAAE,CAAC;IACpB;EACF;;EAEAA,WAAW,CAACC,eAAe;IACzB;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IAEA;IACA,IAAI,CAACH,UAAU,CAACI,IAAI,CAAC,2DAA2D,EAAED,eAAe,CAAC,CAC/FE,SAAS,CAAEC,QAAQ,IAAI;MACtB,IAAIA,QAAQ,EAAC;QACX,IAAI,CAACC,gBAAgB,CAACC,IAAI,CAACF,QAAQ,CAAC;QACpC;;IAGJ,CAAC,CAAC;EACN;;EAEAG,aAAa,CAACC,SAAS;IACrBC,OAAO,CAACC,GAAG,CAACF,SAAS,CAAC;IACtB,IAAI,CAACV,UAAU,CAACa,MAAM,CAAC,qDAAqD,GAAC,GAAG,GAACH,SAAS,CAAC,CACxFL,SAAS,CAAES,MAAM,IAAI;MAClBH,OAAO,CAACC,GAAG,CAAC,QAAQ,EAAEE,MAAM,CAAC;MAC7BC,QAAQ,CAACC,MAAM,EAAE;IACrB,CAAC,EAACpB,IAAI,CAACC,KAAK,CAAC,CAAC;EAElB;EAEF;EACUoB,WAAW,CAACpB,KAAwB;IAC1C,IAAIA,KAAK,CAACqB,MAAM,KAAK,CAAC,EAAE;MACtB;MACAP,OAAO,CAACd,KAAK,CAAC,oBAAoB,EAAEA,KAAK,CAACA,KAAK,CAAC;KACjD,MAAM;MACL;MACA;MACAc,OAAO,CAACd,KAAK,CACX,yBAAyBA,KAAK,CAACqB,MAAM,cAAc,EAAErB,KAAK,CAACA,KAAK,CAAC;;IAErE;IACA,OAAOF,UAAU,CAAC,MAAM,IAAIwB,KAAK,CAAC,iDAAiD,CAAC,CAAC;EACvF;;AAzDWrB,cAAc;mBAAdA,cAAc;AAAA;AAAdA,cAAc;SAAdA,cAAc;EAAAsB,SAAdtB,cAAc;EAAAuB,YAFb;AAAM","names":["Subject","throwError","pipe","error","ProductService","constructor","httpClient","resolve","getProducts","productSearchRQ","post","subscribe","products","onProductsChange","next","deleteProduct","productID","console","log","delete","result","location","reload","handleError","status","Error","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\Chathura Prasanga\\Desktop\\HOM system\\Front-End\\homs\\src\\app\\services\\product\\product.service.ts"],"sourcesContent":["import {Injectable} from '@angular/core';\nimport {Resolve} from \"@angular/router\";\nimport {HttpClient, HttpErrorResponse} from \"@angular/common/http\";\nimport {Observable, Subject, throwError} from \"rxjs\";\nimport {pipe} from \"rxjs\";\nimport {error} from \"@angular/compiler-cli/src/transformers/util\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ProductService implements Resolve<any>{\n\n  onProductsChange = new Subject();\n\n\n  constructor(private httpClient: HttpClient) { }\n\n  resolve():Observable<any> | Promise<any> | any {\n    this.getProducts({});\n    // console.log(\"This is resolve\")\n  }\n\n  getProducts(productSearchRQ){\n    //Jpa Method\n    // this.httpClient.get('http://localhost:8082/api/v1/product/get-all-product')\n    //   .subscribe((products) => {\n    //     if (products){\n    //       this.onProductsChange.next(products)\n    //       // console.log(\"hardwares\",hardwares)\n    //     }\n    //\n    //   });\n\n    //jdbc method\n    this.httpClient.post('http://localhost:8082/api/v1/product/get-all-product-jdbc', productSearchRQ)\n      .subscribe((products) => {\n        if (products){\n          this.onProductsChange.next(products);\n          // console.log(\"products\",products)\n        }\n\n      });\n  }\n\n  deleteProduct(productID){\n    console.log(productID);\n    this.httpClient.delete(\"http://localhost:8082/api/v1/product/delete-product\"+\"/\"+productID)\n      .subscribe((result) => {\n          console.log(\"result\", result);\n          location.reload();\n      },pipe(error));\n\n  }\n\n//  Error Handling\n  private handleError(error: HttpErrorResponse) {\n    if (error.status === 0) {\n      // A client-side or network error occurred. Handle it accordingly.\n      console.error('An error occurred:', error.error);\n    } else {\n      // The backend returned an unsuccessful response code.\n      // The response body may contain clues as to what went wrong.\n      console.error(\n        `Backend returned code ${error.status}, body was: `, error.error);\n    }\n    // Return an observable with a user-facing error message.\n    return throwError(() => new Error('Something bad happened; please try again later.'));\n  }\n\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}