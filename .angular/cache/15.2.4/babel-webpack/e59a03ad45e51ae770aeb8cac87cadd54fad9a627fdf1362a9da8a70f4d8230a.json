{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { Validators } from \"@angular/forms\";\nimport { OrderDTO } from \"../dto/OrderDTO\";\nimport { Subscription } from \"rxjs\";\nimport * as _ from 'underscore';\nlet OrderAddEditComponent = class OrderAddEditComponent {\n  constructor(orderAddEditService, formBuilder, router, location) {\n    this.orderAddEditService = orderAddEditService;\n    this.formBuilder = formBuilder;\n    this.router = router;\n    this.location = location;\n    this.order = new OrderDTO();\n    this.products = [];\n    this.hardwares = [];\n    this.onOrderChangeSub = new Subscription();\n  }\n  ngOnInit() {\n    this.orderAddEditService.onProductsChanged.subscribe(products => {\n      // console.log(\"products\",products)\n      this.products = products;\n    });\n    this.orderAddEditService.onHardwaresChanged.subscribe(hardwares => {\n      // console.log(\"hardwares\",hardwares)\n      this.hardwares = hardwares;\n    });\n    this.onOrderChangeSub = this.orderAddEditService.order.subscribe(order => {\n      if (!_.isEmpty(order)) {\n        // console.log(order);\n        this.order = new OrderDTO(order);\n        this.pageType = 'edit';\n      } else {\n        this.order = new OrderDTO(order);\n        this.pageType = 'new';\n      }\n      // console.log(\"hardware\" , this.hardware)\n      this.orderForm = this.createForm();\n    });\n  }\n  ngOnDestroy() {\n    this.onOrderChangeSub.unsubscribe();\n  }\n  createForm() {\n    return this.formBuilder.group({\n      orderID: [this.order.orderID],\n      invoiceNumber: [this.order.invoiceNumber, [Validators.required]],\n      orderDate: [this.order.orderDate, [Validators.required]],\n      hardwareID: [this.order.hardwareID, [Validators.required]],\n      hardwareName: [this.order.hardwareName],\n      productID: [this.order.productID, [Validators.required]],\n      productCode: [this.order.productCode],\n      productName: [this.order.productName],\n      productPrice: [this.order.productPrice],\n      orderQuantity: [this.order.orderQuantity, [Validators.required]],\n      orderAmount: [this.order.orderAmount, [Validators.required]],\n      paymentMethod: [this.order.paymentMethod, [Validators.required]],\n      paymentStatus: [this.order.paymentStatus, [Validators.required]]\n    });\n  }\n  isValid() {\n    return this.orderForm.valid;\n  }\n  isDirty() {\n    return this.orderForm.dirty;\n  }\n  saveOrder() {\n    let order = this.orderForm.getRawValue();\n    // console.log(\"get data\", product)\n    this.orderAddEditService.saveOrder(order);\n    if (order) {\n      alert(\"Data Saved\");\n      this.location.back();\n    }\n  }\n  goBack() {\n    // console.log(\"click\")\n    // this.router.navigate(['admin/orders']) //using router link\n    this.location.back();\n  }\n  getQuantity(orderQuantity) {\n    console.log(orderQuantity);\n  }\n};\nOrderAddEditComponent = __decorate([Component({\n  selector: 'app-order-add-edit',\n  templateUrl: './order-add-edit.component.html',\n  styleUrls: ['./order-add-edit.component.css']\n})], OrderAddEditComponent);\nexport { OrderAddEditComponent };","map":{"version":3,"mappings":"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","names":["Component","Validators","OrderDTO","Subscription","_","OrderAddEditComponent","constructor","orderAddEditService","formBuilder","router","location","ngOnInit","onProductsChanged","subscribe","products","onHardwaresChanged","hardwares","onOrderChangeSub","order","isEmpty","pageType","orderForm","createForm","ngOnDestroy","unsubscribe","group","orderID","invoiceNumber","required","orderDate","hardwareID","hardwareName","productID","productCode","productName","productPrice","orderQuantity","orderAmount","paymentMethod","paymentStatus","isValid","valid","isDirty","dirty","saveOrder","getRawValue","alert","back","goBack","getQuantity","console","log","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["C:\\Users\\Chathura Prasanga\\Desktop\\HOM system\\Front-End\\homs\\src\\app\\components\\order\\order-add-edit\\order-add-edit.component.ts"],"sourcesContent":["import {Component, OnDestroy, OnInit, ÉµConsole} from '@angular/core';\nimport {FormBuilder, FormGroup, Validators} from \"@angular/forms\";\nimport {OrderDTO} from \"../dto/OrderDTO\";\nimport {Subscription} from \"rxjs\";\nimport {OrderAddEditService} from \"../../../services/order/order-add-edit.service\";\nimport * as _ from 'underscore';\nimport {Router} from \"@angular/router\";\nimport {Location} from \"@angular/common\";\n\n\n@Component({\n  selector: 'app-order-add-edit',\n  templateUrl: './order-add-edit.component.html',\n  styleUrls: ['./order-add-edit.component.css']\n})\nexport class OrderAddEditComponent implements OnInit,OnDestroy{\n\n\n  orderForm : FormGroup;\n  order = new OrderDTO();\n  pageType: string;\n  products: any = [];\n  hardwares: any = [];\n  amount: number;\n\n  onOrderChangeSub = new Subscription();\n\n  constructor(\n    private orderAddEditService : OrderAddEditService,\n    private formBuilder : FormBuilder,\n    private router: Router,\n    private location : Location\n\n  ){}\n\n  ngOnInit(): void {\n\n    this.orderAddEditService.onProductsChanged\n      .subscribe((products)=>{\n        // console.log(\"products\",products)\n        this.products = products;\n      });\n\n    this.orderAddEditService.onHardwaresChanged\n      .subscribe((hardwares)=>{\n        // console.log(\"hardwares\",hardwares)\n        this.hardwares = hardwares;\n      });\n\n    this.onOrderChangeSub = this.orderAddEditService.order\n      .subscribe((order) => {\n        if (!_.isEmpty(order)){\n          // console.log(order);\n          this.order = new OrderDTO(order);\n          this.pageType ='edit';\n        }else {\n          this.order = new OrderDTO(order);\n          this.pageType = 'new';\n        }\n        // console.log(\"hardware\" , this.hardware)\n        this.orderForm = this.createForm();\n      })\n  }\n\n  ngOnDestroy(): void {\n    this.onOrderChangeSub.unsubscribe();\n  }\n\n  createForm(){\n    return this.formBuilder.group({\n      orderID: [this.order.orderID],\n      invoiceNumber: [this.order.invoiceNumber,[Validators.required]],\n      orderDate : [this.order.orderDate,[Validators.required]],\n      hardwareID : [this.order.hardwareID, [Validators.required]],\n      hardwareName : [this.order.hardwareName,],\n      productID : [this.order.productID,[Validators.required]],\n      productCode : [this.order.productCode,],\n      productName : [this.order.productName,],\n      productPrice : [this.order.productPrice,],\n      orderQuantity : [this.order.orderQuantity,[Validators.required]],\n      orderAmount : [this.order.orderAmount,[Validators.required]],\n      paymentMethod : [this.order.paymentMethod,[Validators.required]],\n      paymentStatus : [this.order.paymentStatus,[Validators.required]]\n    });\n  }\n\n  isValid(){\n    return this.orderForm.valid;\n  }\n\n  isDirty(){\n    return this.orderForm.dirty;\n  }\n\n  saveOrder(){\n    let order = this.orderForm.getRawValue();\n    // console.log(\"get data\", product)\n    this.orderAddEditService.saveOrder(order);\n    if (order){\n      alert(\"Data Saved\");\n      this.location.back()\n    }\n  }\n\n  goBack(){\n    // console.log(\"click\")\n    // this.router.navigate(['admin/orders']) //using router link\n    this.location.back();\n  }\n\n  getQuantity(orderQuantity){\n    console.log(orderQuantity)\n  }\n\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}