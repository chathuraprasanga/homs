{"ast":null,"code":"import { Validators } from \"@angular/forms\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../services/auth.service\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"@angular/forms\";\nimport * as i4 from \"@angular/flex-layout/flex\";\nexport class LoginComponent {\n  constructor(authService, router, formBuilder) {\n    this.authService = authService;\n    this.router = router;\n    this.formBuilder = formBuilder;\n  }\n  ngOnInit() {\n    this.authService.loginStatus.subscribe(userDetails => {\n      if (userDetails) {\n        this.router.navigate(['/admin/dashboard']);\n        sessionStorage.setItem('userDetails', JSON.stringify(userDetails)); //stringify is used for convert json to string value\n      } else if (userDetails == null) {\n        alert(\"Authentication Fail\");\n        // console.log(\"Authentication Error\")\n      }\n    });\n\n    this.loginForm = this.formBuilder.group({\n      userName: ['', Validators.required],\n      passWord: ['', Validators.required]\n    });\n  }\n  onLogin() {\n    let data = this.loginForm.getRawValue();\n    // console.log(\"click\")\n    this.authService.login(data);\n    // console.log(\"data\",data);\n    // if (data.username == 'admin' && data.password =='admin'){\n    //   this.authService.login(true);\n    // } else {\n    //   this.authService.login(false);\n    // }\n  }\n}\n\nLoginComponent.ɵfac = function LoginComponent_Factory(t) {\n  return new (t || LoginComponent)(i0.ɵɵdirectiveInject(i1.AuthService), i0.ɵɵdirectiveInject(i2.Router), i0.ɵɵdirectiveInject(i3.FormBuilder));\n};\nLoginComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: LoginComponent,\n  selectors: [[\"app-login\"]],\n  decls: 17,\n  vars: 1,\n  consts: [[\"fxLayoutAlign\", \"center center\", \"fxFlexFill\", \"\"], [1, \"card\"], [1, \"card-body\"], [1, \"login-div\"], [3, \"formGroup\"], [1, \"input-group\", \"mb-3\"], [\"id\", \"basic-addon1\", 1, \"input-group-text\"], [\"type\", \"text\", \"placeholder\", \"Username\", \"aria-label\", \"Username\", \"aria-describedby\", \"basic-addon1\", \"formControlName\", \"userName\", 1, \"form-control\"], [\"id\", \"basic-addon2\", 1, \"input-group-text\"], [\"type\", \"password\", \"placeholder\", \"Password\", \"aria-label\", \"Password\", \"aria-describedby\", \"basic-addon1\", \"formControlName\", \"passWord\", 1, \"form-control\"], [\"type\", \"button\", 1, \"btn\", \"btn-primary\", \"login-btn\", 3, \"click\"]],\n  template: function LoginComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"div\", 2)(3, \"div\", 3)(4, \"h1\");\n      i0.ɵɵtext(5, \"Login\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(6, \"form\", 4)(7, \"div\", 5)(8, \"span\", 6);\n      i0.ɵɵtext(9, \"@\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(10, \"input\", 7);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(11, \"div\", 5)(12, \"span\", 8);\n      i0.ɵɵtext(13, \"@\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(14, \"input\", 9);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(15, \"button\", 10);\n      i0.ɵɵlistener(\"click\", function LoginComponent_Template_button_click_15_listener() {\n        return ctx.onLogin();\n      });\n      i0.ɵɵtext(16, \"Login\");\n      i0.ɵɵelementEnd()()()()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(6);\n      i0.ɵɵproperty(\"formGroup\", ctx.loginForm);\n    }\n  },\n  dependencies: [i3.ɵNgNoValidate, i3.DefaultValueAccessor, i3.NgControlStatus, i3.NgControlStatusGroup, i3.FormGroupDirective, i3.FormControlName, i4.DefaultLayoutAlignDirective, i4.FlexFillDirective],\n  styles: [\"body[_ngcontent-%COMP%]{\\r\\n  max-width: 100%;\\r\\n  max-height: 100%;\\r\\n}\\r\\n\\r\\n.card[_ngcontent-%COMP%]{\\r\\n  width: 25rem;\\r\\n  align-items: center;\\r\\n\\r\\n\\r\\n}\\r\\n\\r\\n.login-div[_ngcontent-%COMP%]{\\r\\n  width: 350px;\\r\\n\\r\\n\\r\\n}\\r\\n\\r\\n.login-btn[_ngcontent-%COMP%]{\\r\\n  float: right;\\r\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvY29tcG9uZW50cy9sb2dpbi9sb2dpbi5jb21wb25lbnQuY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBQ0UsZUFBZTtFQUNmLGdCQUFnQjtBQUNsQjs7QUFFQTtFQUNFLFlBQVk7RUFDWixtQkFBbUI7OztBQUdyQjs7QUFFQTtFQUNFLFlBQVk7OztBQUdkOztBQUVBO0VBQ0UsWUFBWTtBQUNkIiwic291cmNlc0NvbnRlbnQiOlsiYm9keXtcclxuICBtYXgtd2lkdGg6IDEwMCU7XHJcbiAgbWF4LWhlaWdodDogMTAwJTtcclxufVxyXG5cclxuLmNhcmR7XHJcbiAgd2lkdGg6IDI1cmVtO1xyXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XHJcblxyXG5cclxufVxyXG5cclxuLmxvZ2luLWRpdntcclxuICB3aWR0aDogMzUwcHg7XHJcblxyXG5cclxufVxyXG5cclxuLmxvZ2luLWJ0bntcclxuICBmbG9hdDogcmlnaHQ7XHJcbn1cclxuIl0sInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":"AAGA,SAAgCA,UAAU,QAAO,gBAAgB;;;;;;AAOjE,OAAM,MAAOC,cAAc;EAIzBC,YAAoBC,WAAwB,EACxBC,MAAe,EACfC,WAAyB;IAFzB,gBAAW,GAAXF,WAAW;IACX,WAAM,GAANC,MAAM;IACN,gBAAW,GAAXC,WAAW;EAE/B;EAEAC,QAAQ;IACN,IAAI,CAACH,WAAW,CAACI,WAAW,CAACC,SAAS,CAAEC,WAAW,IAAI;MACrD,IAAIA,WAAW,EAAC;QACd,IAAI,CAACL,MAAM,CAACM,QAAQ,CAAC,CAAC,kBAAkB,CAAC,CAAC;QAC1CC,cAAc,CAACC,OAAO,CAAC,aAAa,EAAEC,IAAI,CAACC,SAAS,CAACL,WAAW,CAAC,CAAC,EAAC;OACpE,MAAM,IAAIA,WAAW,IAAI,IAAI,EAAE;QAC9BM,KAAK,CAAC,qBAAqB,CAAC;QAC5B;;IAEJ,CAAC,CAAC;;IAEF,IAAI,CAACC,SAAS,GAAG,IAAI,CAACX,WAAW,CAACY,KAAK,CAAC;MACtCC,QAAQ,EAAG,CAAC,EAAE,EAAClB,UAAU,CAACmB,QAAQ,CAAC;MACnCC,QAAQ,EAAG,CAAC,EAAE,EAACpB,UAAU,CAACmB,QAAQ;KACnC,CAAC;EAEJ;EAEAE,OAAO;IACL,IAAIC,IAAI,GAAG,IAAI,CAACN,SAAS,CAACO,WAAW,EAAE;IAEvC;IACA,IAAI,CAACpB,WAAW,CAACqB,KAAK,CAACF,IAAI,CAAC;IAG5B;IAEA;IACA;IACA;IACA;IACA;EAGF;;;AA5CWrB,cAAc;mBAAdA,cAAc;AAAA;AAAdA,cAAc;QAAdA,cAAc;EAAAwB;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;MCT3BC,8BAA8C;MAKxCA,qBAAK;MAAAA,iBAAK;MACdA,+BAA8B;MAGuBA,iBAAC;MAAAA,iBAAO;MACzDA,4BAAgJ;MAClJA,iBAAM;MAENA,+BAA8B;MACqBA,kBAAC;MAAAA,iBAAO;MACzDA,4BAAoJ;MACtJA,iBAAM;MAIRA,mCAA4E;MAApBA;QAAA,OAASC,aAAS;MAAA,EAAC;MAACD,sBAAK;MAAAA,iBAAS;;;MAdpFA,eAAuB;MAAvBA,yCAAuB","names":["Validators","LoginComponent","constructor","authService","router","formBuilder","ngOnInit","loginStatus","subscribe","userDetails","navigate","sessionStorage","setItem","JSON","stringify","alert","loginForm","group","userName","required","passWord","onLogin","data","getRawValue","login","selectors","decls","vars","consts","template","i0","ctx"],"sourceRoot":"","sources":["C:\\Users\\Chathura Prasanga\\Desktop\\HOM system\\Front-End\\homs\\src\\app\\components\\login\\login.component.ts","C:\\Users\\Chathura Prasanga\\Desktop\\HOM system\\Front-End\\homs\\src\\app\\components\\login\\login.component.html"],"sourcesContent":["import { Component} from '@angular/core';\nimport {AuthService} from \"../../services/auth.service\";\nimport {Route, Router} from \"@angular/router\";\nimport {FormBuilder, FormGroup, Validators} from \"@angular/forms\";\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})\nexport class LoginComponent {\n\n  loginForm : FormGroup;\n\n  constructor(private authService: AuthService,\n              private router : Router,\n              private formBuilder : FormBuilder){\n\n  }\n\n  ngOnInit(): void{\n    this.authService.loginStatus.subscribe((userDetails) => {\n      if (userDetails){\n        this.router.navigate(['/admin/dashboard'])\n        sessionStorage.setItem('userDetails', JSON.stringify(userDetails)) //stringify is used for convert json to string value\n      } else if (userDetails == null) {\n        alert(\"Authentication Fail\")\n        // console.log(\"Authentication Error\")\n      }\n    });\n\n    this.loginForm = this.formBuilder.group({\n      userName : ['',Validators.required],\n      passWord : ['',Validators.required]\n    })\n\n  }\n\n  onLogin(){\n    let data = this.loginForm.getRawValue();\n\n    // console.log(\"click\")\n    this.authService.login(data);\n\n\n    // console.log(\"data\",data);\n\n    // if (data.username == 'admin' && data.password =='admin'){\n    //   this.authService.login(true);\n    // } else {\n    //   this.authService.login(false);\n    // }\n\n    \n  }\n\n\n\n}\n","\n<div fxLayoutAlign=\"center center\" fxFlexFill>\n<div class=\"card\" >\n  <div class=\"card-body\">\n<div class=\"login-div\">\n\n  <h1>Login</h1>\n  <form [formGroup]=\"loginForm\">\n\n    <div class=\"input-group mb-3\">\n      <span class=\"input-group-text\" id=\"basic-addon1\">@</span>\n      <input type=\"text\" class=\"form-control\" placeholder=\"Username\" aria-label=\"Username\" aria-describedby=\"basic-addon1\" formControlName=\"userName\">\n    </div>\n\n    <div class=\"input-group mb-3\">\n      <span class=\"input-group-text\" id=\"basic-addon2\">@</span>\n      <input type=\"password\" class=\"form-control\" placeholder=\"Password\" aria-label=\"Password\" aria-describedby=\"basic-addon1\" formControlName=\"passWord\">\n    </div>\n\n  </form>\n\n  <button type=\"button\" class=\"btn btn-primary login-btn\" (click)=\"onLogin()\">Login</button>\n\n</div>\n  </div>\n</div>\n</div>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}